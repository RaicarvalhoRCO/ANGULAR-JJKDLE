const sleep = ms => new Promise(r => setTimeout(r, ms));

var step1 = document.getElementById('image-step-1');
var step3 = document.getElementById('image-step-3');
var step4 = document.getElementById('image-step-4');
var step5 = document.getElementById('image-step-5');
var step6 = document.getElementById('image-step-6');
var step7 = document.getElementById('image-step-7');

var steps = [
  'image-step-1',
  'image-step-2',
  'image-step-3',
  'image-step-4',
  'image-step-5',
  'image-step-6',
  'image-step-7',
  'image-step-8',
  'image-step-9',
  'image-step-10',
  'image-step-11',
  'image-step-12',
  'image-step-13',
  'image-step-14',
];

var currentStep = getCurrentStep();
var svgContainer = document.createElement('div');
var helperText = document.createElement('p');
helperText.id = 'helper-text';

// public functions
document.confirmConsent = confirmConsent;
document.showPrivacyConsent = showPrivacyConsent;
document.hidePrivacyConsent = hidePrivacyConsent;
document.openTermsAndConditions = openTermsAndConditions;
document.showChatElement = showChatElement;
document.hideChatElement = hideChatElement;


let ogForm;

function getCurrentStep() {
  for (var i = 0; i < steps.length; i++) {
    if (document.getElementById(steps[i])) {
      return i;
    }
  }
  return -1;
}

function performActions() {
  var signupForm = document.querySelectorAll('form')[0];
  if (signupForm && signupForm.children.length >= 2 && !step1) {

    var secondStepDiv = signupForm.children[1];

    secondStepDiv.classList.remove('justify-content-between');
    secondStepDiv.classList.add('justify-content-center');

    var anchorElement = secondStepDiv.firstElementChild;

    if (anchorElement) {
      anchorElement.setAttribute('id', 'anchorElement');
      anchorElement.style.display = 'none';
    }

    const helperTextAlreadyExists = document.getElementById('helper-text');
    if (!helperTextAlreadyExists) {
      secondStepDiv.parentNode.insertBefore(helperText, secondStepDiv);
    }

    if (currentStep === 0) {

      function onChangeEmail(event) {
        const email_ = event.target.value;
        if (email_.length > 0) {
          helperText.style.margin = '10px 14px 20px 14px';
          helperText.style.display = 'block';
          helperText.innerHTML = `By submitting your email, you agree to our Terms and Conditions, Privacy & Cookies Policy, to receive marketing communications, and confirm that you are over 18 years old <a style='color: #6495ED' onclick='showPrivacyConsent()'>View and edit</a>`;
        } else {
          helperText.style.margin = '-5px 14px 20px 14px';
          configureHelperTextForStep();
        }
      }

      const emailInput = document.getElementById(`username`);
      if (emailInput) {
        emailInput.removeEventListener('keyup', onChangeEmail);
        emailInput.addEventListener('keyup', onChangeEmail);
      }
    }

    if (currentStep == 3) {
      const changePassValidationStatus = (id, isAdd) => {
        if (isAdd) {
          document.getElementById(id).classList.add('pass-valid');
        } else {
          document.getElementById(id).classList.remove('pass-valid');
        }
      }

      function onChangePassword(event) {
        const password = event.target.value;

        changePassValidationStatus('pass-length', password.length >= 8);
        changePassValidationStatus('pass-capital', !!password.match(/[A-Z]/));
        changePassValidationStatus('pass-number', !!password.match(/[0-9]/));
        changePassValidationStatus('pass-special', !!password.match(/[^A-Za-z0-9]/));
      }

      const passwordInput = document.querySelector(`input[type='password']`);
      if (passwordInput) {
        passwordInput.removeEventListener('keyup', onChangePassword);
        passwordInput.addEventListener('keyup', onChangePassword);
      }
    }

    if (anchorElement && !step1) {
      svgContainer.classList.add(
        'd-flex',
        'justify-content-between',
        'full-width',
        'align-items-center'
      );
    }
  }
}

function reloadImageStep() {
  const loader = document.getElementById('loader-container');
  loader.style.display = 'flex';

  const osForm = document.querySelectorAll('os-form')[0];
  const firstDiv = osForm.querySelectorAll('div')[0];
  firstDiv.style.display = 'none';

  if (currentStep < steps.length - 1) {
    var currentImage = document.getElementById(steps[currentStep]);
    if (currentImage) {
      var newImage = currentImage.cloneNode(true);
      newImage.id = steps[currentStep + 1];

      if (currentStep == 0) {
        newImage.id = steps[currentStep + 2];
      }

      currentImage.parentNode.replaceChild(newImage, currentImage);
    } else {
      console.error('Current image not found for step: ' + steps[currentStep]);
    }
  }
}

function goBackStep() {
  if (currentStep !== 0) {
    const loader = document.getElementById('loader-container');
    loader.style.display = 'flex';

    const osForm = document.querySelectorAll('os-form')[0];
    const firstDiv = osForm.querySelectorAll('div')[0];
    firstDiv.style.display = 'none';
  }

  if (currentStep > 0) {
    var anchorElement = document.getElementById('anchorElement');
    anchorElement?.click();

    var currentImage = document.getElementById(steps[currentStep]);
    if (currentImage) {
      var newImage = currentImage.cloneNode(true);
      newImage.id = steps[currentStep - 1];

      if (currentStep == 2) {
        newImage.id = steps[0];
      }

      currentImage.parentNode.replaceChild(newImage, currentImage);
    }
  }

  if (currentStep == 0) {
    const email = document.getElementById('username');
    const matformfield = email.parentNode.parentNode.parentNode.parentNode;
    matformfield.style.display = 'none';

    let step1OnScreen = document.getElementById('step-1-form');
    step1OnScreen.classList.remove('fake-step-2');

    let containerHeader = document.getElementById('container-header') || createContainerHeader(firstDiv);
    setupContainerHeaderForStep1(containerHeader);

    document.getElementById('span-title')?.remove();
  }
}

function addListenerButton() {
  const signupForm = document.querySelectorAll('form')[0];
  if (signupForm) {
    const nextButton = signupForm.querySelector(`button[type='submit']`);

    createBackButtonSvg();
    const backButton = document.getElementById('backButton');

    if (backButton) {
      backButton.onclick = goBackStep;
      backButton.style.display = 'block';
    }

    if (nextButton && currentStep == 0) {
      let fakeNextButton = document.querySelector(`a[ref='button-fake-step']`);
      fakeNextButton.onclick = showEmailAndHideSteps;
      nextButton.onclick = reloadImageStep;
    }

    if (nextButton && currentStep != 0 && currentStep != 6) {
      nextButton.onclick = reloadImageStep;
    }

    if (currentStep == 2) {
      //todo change backbutton on pass screen
    }

  } else {
    setTimeout(addListenerButton, 100);
  }
}

function preCheckMarks() {
  const terms = document.querySelector('sh-terms-privacy-policy-checkbox');
  const checkTerms = terms.querySelector('input');
  if (!checkTerms.checked) {
    checkTerms.click();
  }

  const market = document.querySelector('sh-marketing-consent-checkbox');
  const checkMarket = market.querySelector('input');
  if (!checkMarket.checked) {
    checkMarket.click();
  }
}

function showEmailAndHideSteps() {
  preCheckMarks();
  currentStep = 1;

  const email = document.getElementById('username');
  const matformfield = email.parentNode.parentNode.parentNode.parentNode;
  matformfield.style.display = 'block';

  let step1OnScreen = document.getElementById('step-1-form');
  step1OnScreen.classList.add('fake-step-2');

  let containerHeader = document.getElementById('container-header') || createContainerHeader(firstDiv);

  const iconsHeaderContainer = document.getElementById('icon-header-container');
  if (iconsHeaderContainer) {
    iconsHeaderContainer.remove();
  }
  setupContainerHeaderForOtherSteps(containerHeader);

  let spanTitle = configureTitleForStep(1);
  containerHeader.appendChild(spanTitle);

  const osForm = document.querySelectorAll('os-form')[0];
  osForm.querySelector('div.rich-text').style.height = '0px';

  let button = osForm.querySelector('button')
  button.id = '';
  button.parentNode.classList.add('force-justify-center');

  const signupForm = document.querySelectorAll('form')[0];
  const secondStepDiv = signupForm.children[1];

  const helperTextAlreadyExists = document.getElementById('helper-text');
  if (!helperTextAlreadyExists) {
    secondStepDiv.parentNode.insertBefore(helperText, secondStepDiv);
  }

  configureHelperTextForStep();

  function onChangeEmail(event) {
    const email_ = event.target.value;
    if (email_.length > 0) {
      helperText.style.margin = '10px 14px 20px 14px';
      helperText.style.display = 'block';
      helperText.innerHTML = `By submitting your email, you agree to our Terms and Conditions, Privacy & Cookies Policy, to receive marketing communications, and confirm that you are over 18 years old <a style='color: #6495ED' onclick='showPrivacyConsent()'>View and edit</a>`;
    } else {
      helperText.style.margin = '-5px 14px 20px 14px';
      configureHelperTextForStep();
    }
  }

  const emailInput = document.getElementById(`username`);
  if (emailInput) {
    emailInput.removeEventListener('keyup', onChangeEmail);
    emailInput.addEventListener('keyup', onChangeEmail);
  }

  const backButton = document.getElementById('backButton');
  backButton.onclick = function () {
    const email = document.getElementById('username');
    const matformfield = email.parentNode.parentNode.parentNode.parentNode;
    matformfield.style.display = 'none';

    let step1OnScreen = document.getElementById('step-1-form');
    step1OnScreen.classList.remove('fake-step-2');

    let containerHeader = document.getElementById('container-header') || createContainerHeader(firstDiv);
    setupContainerHeaderForStep1(containerHeader);

    document.getElementById('span-title')?.remove();

    document.getElementById('helper-text')?.remove();

    const osForm = document.querySelectorAll('os-form')[0];
    osForm.querySelector('div.rich-text').style.height = 'max-content';

    const signupForm = document.querySelectorAll('form')[0];
    const emailContainer = signupForm.querySelectorAll('div')[0];
    emailContainer.style.height = 'max-content';

    setUpFakeStep0()
  };

  currentStep = 0;
}


var tempForm;
var tempCallback;

function createPrivacyConsent() {
  let market = document.querySelector('sh-marketing-consent-checkbox');
  if (market) {
    market.parentElement.parentElement.style.display = 'none';
  }

  const terms = document.querySelector('sh-terms-privacy-policy-checkbox');
  if (terms) {
    terms.parentElement.parentElement.style.display = 'none';
  }

  const privacyConsent = document.createElement('div');
  privacyConsent.className = 'privacy-consent d-none';
  privacyConsent.innerHTML = `
  <h4>I agree to the following</h4>

  <div class='checkbox-readonly-group'>
    <p>
      I have read and accepted the <a style='color: #6495ed' onclick='openTermsAndConditions()'>Terms and Conditions</a>, and I am
      over 18 years old.
    </p>
    <input type='checkbox' checked disabled />
  </div>

  <div class='checkbox-group'>
    <p>
      We at Instacasino would like to send you information regarding our
      instant bonuses, free money offers, free spins and other promotional
      information, as well as important information to enhance your gaming
      experience. Tick this box if you do not wish to receive such
      information.
    </p>
    <input onclick='checkMarketConsent()' id='privacy-consent-checkbox' type='checkbox' />
  </div>

  <button onclick='confirmConsent()'>Confirm</button>`;

  const form_ = document.querySelectorAll('form')[0];
  form_.parentNode.appendChild(privacyConsent);
}

function showPrivacyConsent() {

  const spanTitle = document.getElementById('span-title');
  const backButton = document.getElementById('backButton');

  if (!spanTitle || !backButton) {
    setTimeout(showPrivacyConsent, 100);
    return;
  }

  tempCallback = backButton;
  const newBackButton = backButton.cloneNode(true);
  newBackButton.removeEventListener('click', goBackStep);
  newBackButton.addEventListener('click', hidePrivacyConsent);
  backButton.parentNode.replaceChild(newBackButton, backButton);

  spanTitle.textContent = 'Privacy Consent';

  const privacyConsent = document.querySelector('div.privacy-consent');
  privacyConsent.classList.remove('d-none');

  const form_ = document.querySelectorAll('form')[0];
  form_.classList.add('d-none');
  form_.parentNode.prepend(privacyConsent);
}

function hidePrivacyConsent() {
  const spanTitle = document.getElementById('span-title');
  const backButton = document.getElementById('backButton');

  if (!spanTitle || !backButton) {
    setTimeout(hidePrivacyConsent, 100);
    return;
  }

  backButton.parentNode.replaceChild(tempCallback, backButton);
  spanTitle.textContent = 'Start with email';

  const form_ = document.querySelectorAll('form')[0];
  form_.classList.remove('d-none');

  const privacyConsent = document.querySelector('div.privacy-consent');
  privacyConsent.classList.add('d-none');
}

function confirmConsent() {
  hidePrivacyConsent();
}

function checkMarketConsent() {
  const markt = document.querySelector('sh-marketing-consent-checkbox');
  markt.querySelector('input').click();
}
document.checkMarketConsent = checkMarketConsent;

function createLoader() {
  const osForm = document.querySelectorAll('os-form')[0];

  const loader = document.createElement('div');
  loader.className = 'loader';
  loader.id = 'loader';
  const loaderContainer = document.createElement('div');
  loaderContainer.id = 'loader-container';
  loaderContainer.appendChild(loader);
  osForm.appendChild(loaderContainer);
}

function actionOsForm() {
  var osForm = document.querySelectorAll('os-form')[0];

  const containerLoader = document.getElementById('loader-container');

  var loaderAlreadyExists = document.getElementById('loader') || createLoader();
  if (loaderAlreadyExists && currentStep !== 0) {
    containerLoader.style.display = 'flex';
  }

  let topMenu = document.getElementById('top-menu').classList;

  if (!osForm) {
    setTimeout(actionOsForm, 100);
    return;
  }

  osForm.onclick = function (event) {
    clickOsForm(event, osForm, topMenu);
  };

  const firstDiv = osForm.querySelectorAll('div')[0];

  if (!firstDiv) return;

  if (currentStep !== 0) {
    firstDiv.style.display = 'none';
  }

  firstDiv.classList.add('pt-4');
  firstDiv.style.flexDirection = 'column';
  firstDiv.style.width = '100%';

  if (step3) {
    const column = document.getElementsByClassName('column')[0];
    if (column) {
      column.style.display = 'none';
    }
    firstDiv.style.gap = '0px';
  }
  else firstDiv.style.gap = '20px';

  var containerHeader =
    document.getElementById('container-header') ||
    createContainerHeader(firstDiv);

  if (currentStep !== 0) {
    configureHelperTextForStep();
    setupContainerHeaderForOtherSteps(containerHeader);
    var spanTitle = configureTitleForStep(currentStep);
    containerHeader.appendChild(spanTitle);
  } else {
    setupContainerHeaderForStep1(containerHeader);
  }

  if (currentStep == 0) {
    createPrivacyConsent();
    setUpFakeStep0();
  }

  hideSpinner();

  ogForm = document.querySelectorAll('os-form')[0].cloneNode(true);
}

function clickOsForm(event, osForm, topMenu) {
  const isCloseIcon = event.target.id === 'closeIcon' || event.target.closest('#closeIcon');

  const isChangeToOtp = event.target.id == 'phone-otp-a' || event.target.closest('#phone-otp-a');

  const isFailedRegSignIn = event.target.id == 'failed-registration-sign-in'
  const isFailedForgotPass = event.target.id == 'failed-registration-reset-pass';
  const isFailedButton = isFailedForgotPass || isFailedRegSignIn;

  if (isCloseIcon || isChangeToOtp || isFailedButton) {

    if (isCloseIcon) {
      location.reload();
    }

    osForm.style.display = 'none';
    if (!topMenu.contains('opened')) {
      showChatElement();
      const fixedMenu = getElementById('fixed-menu');
      if (fixedMenu.style.display == 'none') {
        fixedMenu.style.display = 'flex';
      }
    }
    if (!isChangeToOtp) {
      document.querySelector('div.app--content-spacer--content--wrapper.blur')?.classList?.remove('blur');
    }

    if (isFailedRegSignIn) {
      document.getElementById('fixed-menu').querySelectorAll('a')[0].click();
    }

    if (isFailedForgotPass) {
      async function openForgotPassword() {
        let menu = document.getElementById('fixed-menu');
        let signInButton = menu.children[0]
        signInButton.click()

        await sleep(200);

        const loginModal = document.querySelector('os-login-modal');
        const forgotPass = loginModal.querySelector(`t[key='modal:forgot_password']`);

        await sleep(100);

        forgotPass.click()
        forgotPass.click()
      }

      openForgotPassword();
    }

  } else {
    osForm.style.display = 'flex';
    osForm.id = 'popupOsForm';
    hideChatElement();
  }
}

async function resetForm(sleepTime = 350) {
  for (let i = 0; i < steps.length; i++) {
    await sleep(sleepTime);
    hideSpinner();

    let stepNumber = +document.querySelector(`[id^='image-step-']`).id.split('step-')[1];

    const osForm = document.querySelectorAll('os-form')[0];
    const form = osForm.querySelector('form');

    if (form) {
      const inputs = form.querySelectorAll('input');
      inputs.forEach(input => {
        if (input.type == 'password') {
          input.placeholder = ''
        };
        input.value = ''
      });

      if (inputs.length < 5) {
        form.reset();
      }
    }

    let backButton = document.getElementById('backButton');
    let hasBackButton = !!backButton && backButton.style.display != 'none';

    if (hasBackButton && stepNumber != 1) {
      document.getElementById('backButton').onclick()
      stepNumber -= 1;
      hideSpinner();
    }

    if (stepNumber == 1) {
      break;
    }
  }
}

document.resetForm = resetForm;

function forceImageStepTo(stepToGo) {
  const loader = document.getElementById('loader-container');
  loader.style.display = 'flex';

  const osForm = document.querySelectorAll('os-form')[0];
  const firstDiv = osForm.querySelectorAll('div')[0];
  firstDiv.style.display = 'none';

  var currentImage = document.getElementById(steps[currentStep]);
  if (currentImage) {
    var newImage = currentImage.cloneNode(true);
    newImage.id = steps[stepToGo];
    currentImage.parentNode.replaceChild(newImage, currentImage);
  }
}

function setUpFakeStep0() {
  const osForm = document.querySelectorAll('os-form')[0];

  const email = document.getElementById('username');
  const button = osForm.querySelectorAll('button')[0];

  if (!button || !email) {
    setTimeout(setUpFakeStep0, 200);
    return;
  }

  const matformfield = email.parentNode.parentNode.parentNode.parentNode;
  matformfield.style.display = 'none'

  button.setAttribute('id', 'fake-step-button');
  button.style.display = 'none !important';
}

function hideSpinner() {
  const loader = document.getElementById('loader-container');
  const osForm = document.querySelectorAll('os-form')[0];
  const firstDiv = osForm.querySelectorAll('div')[0];

  loader.style.display = 'none';
  firstDiv.style.display = 'flex';
}
document.hideSpinner = hideSpinner;

function createContainerHeader(parentDiv) {
  const containerHeader = document.createElement('div');
  containerHeader.id = 'container-header';
  containerHeader;
  parentDiv.insertBefore(containerHeader, parentDiv.firstChild);
  return containerHeader;
}

function setupContainerHeaderForStep1(containerHeader) {
  containerHeader.className =
    'd-flex justify-content-end full-width align-items-center';

  const closeAlreadyExist = document.getElementById('closeIcon');

  if (!closeAlreadyExist) {
    const closeButton = createSvgElement();
    containerHeader.appendChild(closeButton);
  }

  const spanTitle = document.getElementById('span-title');
  const backButton = document.getElementById('backButton');
  const iconsHeaderContainer = document.getElementById('icon-header-container');

  if (backButton && iconsHeaderContainer) {

    if (spanTitle) {
      spanTitle.style.display = 'none';
    }

    backButton.style.display = 'none';
    iconsHeaderContainer.classList.remove('justify-content-between');
    iconsHeaderContainer.classList.add('justify-content-end');
  }
}

function setupContainerHeaderForOtherSteps(containerHeader) {
  containerHeader.className = 'd-flex full-width';
  containerHeader.style.flexDirection = 'column';
  containerHeader.style.gap = '13px';

  const iconsHeaderContainerAlreadyExists = document.getElementById(
    'icon-header-container'
  );
  if (!iconsHeaderContainerAlreadyExists) {
    const iconsHeaderContainer = document.createElement('div');
    iconsHeaderContainer.className =
      'd-flex justify-content-between full-width align-items-center';
    iconsHeaderContainer.id = 'icon-header-container';

    const backButton = createBackButtonSvg();

    if (backButton) {
      backButton.onclick = goBackStep;
      backButton.style.display = 'block';
    }
    const closeIcon =
      document.getElementById('closeIcon') || createSvgElement();

    iconsHeaderContainer.appendChild(backButton);
    iconsHeaderContainer.appendChild(closeIcon);
    containerHeader.appendChild(iconsHeaderContainer);
  } else {
    iconsHeaderContainerAlreadyExists.classList.remove('justify-content-end');
    iconsHeaderContainerAlreadyExists.classList.add('justify-content-between');
  }
}

function configureTitleForStep(currentStep) {
  let title = '';

  if (currentStep === 1) {
    title = 'Start with email';
  } else if (currentStep == 3) {
    title = 'Password';
  } else if (currentStep >= 5 && currentStep < 7) {
    title = 'Confirm your details';
  }

  const spanTitleAlreadyExists = document.getElementById('span-title');

  if (!spanTitleAlreadyExists) {
    const spanTitle = document.createElement('span');
    spanTitle.id = 'span-title';
    spanTitle.textContent = title;
    return spanTitle;

  } else {
    spanTitleAlreadyExists.textContent = title;
    spanTitleAlreadyExists.style.display = 'block';
  }

  return spanTitleAlreadyExists;
}

function configureStep1HelperText() {
  const signupForm = document.querySelectorAll('form')[0];
  const emailContainer = signupForm.querySelectorAll('div')[0];
  emailContainer.style.height = 'max-content';
}

function configureStep3HelperText() {
  const signupForm = document.querySelectorAll('form')[0];
  const passwordContainer = signupForm.querySelectorAll('div')[0];
  passwordContainer.style.height = '90px';
}

function configureStep5HelperText() {
  const osRegistrationContainer = document.querySelectorAll('os-registration')[0];

  osRegistrationDiv = osRegistrationContainer.querySelectorAll('div')[0];
  osRegistrationDiv.style.height = '400px';

  const signupForm = document.querySelectorAll('form')[0];
  signupForm.style.height = '350px';

  const signupFormDiv = signupForm.querySelectorAll('div')[0];
  signupFormDiv.style.height = 'max-content';

  const lastNameContainer = signupForm.querySelectorAll('div')[12];
  lastNameContainer.style.marginTop = '15px';

  const birthdateContainer = signupForm.querySelectorAll('div')[24];

  birthdateContainer.style.marginTop = '70px';

  const helpTextLastName = document.createElement('p');
  helpTextLastName.innerText = 'Your legal name as it appears in your ID card';
  helpTextLastName.style.margin = '-5px 0px 0px 15px';
  helpTextLastName.style.fontFamily = 'DM Sans';
  helpTextLastName.style.fontWeight = '500';
  helpTextLastName.style.fontSize = '12px';
  helpTextLastName.style.lineHeight = '16px';
  helpTextLastName.style.color = '#D4DBD1';
  lastNameContainer.appendChild(helpTextLastName);
}

function configureStep6HelperText() {
  const osRegistrationContainer = document.querySelectorAll('os-registration')[0];

  osRegistrationDiv = osRegistrationContainer.querySelectorAll('div')[0];
  osRegistrationDiv.style.height = '400px';

  const signupForm = document.querySelectorAll('form')[0];
  signupForm.style.height = '350px';

  const signupFormDiv = signupForm.querySelectorAll('div')[0];
  signupFormDiv.style.height = 'max-content';

  const addressContainer = signupForm.querySelector(`mat-form-field input[name='address']`).closest('mat-form-field');

  const phoneNumberContainer = signupForm.querySelector(`mat-form-field input[name='phone-number']`).closest('mat-form-field');
  phoneNumberContainer.style.marginTop = '35px';

  const currencyContainer = signupForm.querySelector(`mat-select[data-e2e='currency']`).closest('mat-form-field');

  currencyContainer.style.marginTop = '50px';

  const helpTextAddress = document.createElement('p');
  helpTextAddress.innerText = 'City, Street, house number';
  helpTextAddress.style.margin = '-5px 0px 0px 15px';
  helpTextAddress.style.fontFamily = 'DM Sans';
  helpTextAddress.style.fontWeight = '500';
  helpTextAddress.style.fontSize = '12px';
  helpTextAddress.style.lineHeight = '16px';
  helpTextAddress.style.color = '#D4DBD1';

  const helpTextPhoneNumber = document.createElement('p');
  helpTextPhoneNumber.innerText = 'Example: 55999999';
  helpTextPhoneNumber.style.margin = '-5px 0px 0px 15px';
  helpTextPhoneNumber.style.fontFamily = 'DM Sans';
  helpTextPhoneNumber.style.fontWeight = '500';
  helpTextPhoneNumber.style.fontSize = '12px';
  helpTextPhoneNumber.style.lineHeight = '16px';
  helpTextPhoneNumber.style.color = '#D4DBD1';

  phoneNumberContainer.appendChild(helpTextPhoneNumber);
  addressContainer.appendChild(helpTextAddress);
}

function configureHelperTextForStep() {
  switch (currentStep) {
    case 1:
      helperText.style.display = 'block';
      helperText.innerHTML = `Example: email@mail.com`;
      configureStep1HelperText();
      break;
    case 3:
      helperText.style.display = 'block';
      helperText.innerHTML = `<span id='pass-length'>• At least 8 characters.</span><br><span id='pass-capital'>• At least a Capital letter</span><br><span id='pass-number'>• At least a number</span><br><span id='pass-special'>• At least one special symbol</span>`;
      configureStep3HelperText();
      break;
    case 5:
      configureStep5HelperText();
      break;
    case 6:
      configureStep6HelperText();
      break;
    default:
      helperText.style.display = 'none';
      break;
  }
}

function createSvgElement() {
  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
  svg.setAttribute('width', '36');
  svg.setAttribute('height', '36');
  svg.setAttribute('viewBox', '0 0 36 36');
  svg.setAttribute('fill', 'none');
  svg.setAttribute('id', 'closeIcon');

  const rect1 = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
  rect1.setAttribute('x', '8.17749');
  rect1.setAttribute('y', '25.8575');
  rect1.setAttribute('width', '25');
  rect1.setAttribute('height', '1.85185');
  rect1.setAttribute('rx', '0.925926');
  rect1.setAttribute('transform', 'rotate(-45 8.17749 25.8575)');
  rect1.setAttribute('fill', '#51FF00');

  const rect2 = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
  rect2.setAttribute('x', '26.1777');
  rect2.setAttribute('y', '26.8575');
  rect2.setAttribute('width', '25');
  rect2.setAttribute('height', '1.85185');
  rect2.setAttribute('rx', '0.925926');
  rect2.setAttribute('transform', 'rotate(-135 26.1777 26.8575)');
  rect2.setAttribute('fill', '#51FF00');

  svg.appendChild(rect1);
  svg.appendChild(rect2);

  return svg;
}

function createBackButtonSvg() {
  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
  svg.setAttribute('width', '16');
  svg.setAttribute('height', '29');
  svg.setAttribute('viewBox', '0 0 16 29');
  svg.setAttribute('fill', 'none');
  svg.setAttribute('id', 'backButton');

  const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');

  const path1 = document.createElementNS('http://www.w3.org/2000/svg', 'path');
  path1.setAttribute('id', 'Line 41');
  path1.setAttribute('d', 'M14.5 1.99994L2 14.4999');
  path1.setAttribute('stroke', '#51FF00');
  path1.setAttribute('stroke-width', '2');
  path1.setAttribute('stroke-linecap', 'square');

  const path2 = document.createElementNS('http://www.w3.org/2000/svg', 'path');
  path2.setAttribute('id', 'Line 42');
  path2.setAttribute('d', 'M2 14.4999L14.5 26.9999');
  path2.setAttribute('stroke', '#51FF00');
  path2.setAttribute('stroke-width', '2');
  path2.setAttribute('stroke-linecap', 'square');

  g.appendChild(path1);
  g.appendChild(path2);
  svg.appendChild(g);

  return svg;
}

function hideChatElement() {
  var chatElement = document.getElementById('zsiq_float');
  if (chatElement) {
    chatElement.style.display = 'none';
  } else {
    setTimeout(hideChatElement, 100);
  }
}

function showChatElement() {
  var chatElement = document.getElementById('zsiq_float');
  if (chatElement) {
    chatElement.style.display = 'block';
  } else {
    setTimeout(hideChatElement, 100);
  }
}

function step3SetUp() {
  if (step3) {
    const passwordContainer = document.querySelectorAll('form')[0];
    const passwordDivs = passwordContainer.querySelectorAll('div');
    if (passwordDivs.length < 2) {
      console.error('Not enough div elements found in the form.');
      return;
    }
    const stepContainerDiv = passwordDivs[1];
    if (!stepContainerDiv) {
      console.error('Step container div not found.');
      return;
    }
    stepContainerDiv.style.flexDirection = 'column';

    const step3HTML = document.createElement('div');
    stepContainerDiv.appendChild(step3HTML);
    step3HTML.innerHTML = `<div class='d-flex justify-content-center flex-column'>
      <div class='circle-container'>
          <div id='completed-step-circle'>
              <svg id='completed-step-svg' xmlns='http://www.w3.org/2000/svg' width='100%' height='100%' viewBox='0 0 16 16'>
              <path d='M3.762 14.792C3.762 14.63 3.744 14.558 3.672 14.558L3.258 14.756C3.258 14.666 3.204 14.612 3.114 14.576L2.97 14.558C2.844 14.558 2.79 14.576 2.61 14.684C2.556 14.576 2.484 14.45 2.43 14.342C1.962 13.442 1.476 12.092 1.26 11.498C1.152 11.192 1.044 10.562 0.918 9.608C1.062 9.698 1.17 9.734 1.224 9.734C1.296 9.734 1.386 9.608 1.458 9.356C1.494 9.41 1.566 9.428 1.656 9.428C1.71 9.428 1.782 9.41 1.818 9.356L2.106 8.924L2.43 9.032H2.448C2.484 9.032 2.538 8.978 2.628 8.924C2.718 8.87 2.79 8.834 2.844 8.834L2.898 8.852C3.186 8.996 3.384 9.248 3.474 9.644C3.69 10.562 3.888 11.012 4.122 11.012C4.32 11.012 4.59 10.778 4.878 10.328C5.166 9.878 5.454 9.266 5.778 8.528C5.796 8.672 5.814 8.744 5.85 8.744C5.958 8.744 6.228 8.114 6.894 7.052C7.884 5.45 10.332 2.372 10.962 1.94C11.43 1.616 11.79 1.31 12.042 1.04C12.006 1.22 11.97 1.346 11.97 1.4C11.97 1.454 12.006 1.472 12.042 1.472L12.546 1.22V1.292C12.546 1.382 12.564 1.436 12.618 1.436C12.69 1.436 12.978 1.148 13.014 1.04L12.978 1.292L13.59 0.932L13.446 1.256C13.626 1.13 13.77 1.058 13.86 1.058C13.95 1.058 14.004 1.202 14.004 1.292C14.004 1.436 13.878 1.634 13.68 1.886C13.464 2.174 12.924 2.732 11.304 4.586C10.602 5.378 7.488 9.608 6.894 10.616L5.778 12.506C5.292 13.316 4.986 13.838 4.824 14.036C4.662 14.234 4.464 14.432 4.23 14.612L4.068 14.522L3.924 14.612L3.762 14.792Z' fill='black'/>
            </svg>
          </div>
          <span class='circle-text'>Email address</span>
      </div>
      <div class='line-container'>
          <div class='line'></div>
      </div>
      <div class='button-span-container'></div>
          <svg id='register-step3-svg' width='14' height='25' viewBox='0 0 14 25' fill='none'>
              <path d='M2 2.80176L12 12.7862' stroke='black' stroke-width='4' stroke-linecap='round' />
              <path d='M12 12.7861L2 22.7705' stroke='black' stroke-width='4' stroke-linecap='round' />
          </svg>
      <div class='line-container'>
          <div class='line'></div>
      </div>
      <div class='circle-container'>
          <div class='circle'></div>
          <span class='circle-text'>Confirm your details</span>
      </div>
      <div class='line-container'>
          <div class='line'></div>
      </div>
      <div class='bonus-container'>
          <div class='bonus-circle'></div>
          <div class='bonus-text'>
              <span class='text-claim'>Claim</span>
              <span class='text-bonus'>BONUS</span>
          </div>
      </div>
    </div>`;
    const passwordButton = passwordContainer.querySelector('button');
    passwordButton.id = 'register-large-button';

    const passwordButtonDiv = document.querySelector('.button-span-container');
    passwordButtonDiv.appendChild(passwordButton, passwordButtonDiv.firstChild)

    const svg = document.getElementById('register-step3-svg');
    passwordButton.appendChild(svg);
  }
}

function step4SetUp() {
  if (currentStep === 4) {
    const confirmDetailsContainer = document.querySelectorAll('form')[0];
    const confirmDetailsDivs = confirmDetailsContainer.querySelectorAll('div');
    if (confirmDetailsDivs.length < 2) {
      console.error('Not enough div elements found in the form.');
      return;
    }
    const stepContainerDiv = confirmDetailsDivs[1];
    if (!stepContainerDiv) {
      console.error('Step container div not found.');
      return;
    }
    stepContainerDiv.style.flexDirection = 'column';

    const step4HTML = document.createElement('div');
    stepContainerDiv.appendChild(step4HTML);
    step4HTML.innerHTML = `<div class='d-flex justify-content-center flex-column'>
      <div class='circle-container'>
          <div id='completed-step-circle'>
              <svg id='completed-step-svg' xmlns='http://www.w3.org/2000/svg' width='100%' height='100%' viewBox='0 0 16 16'>
              <path d='M3.762 14.792C3.762 14.63 3.744 14.558 3.672 14.558L3.258 14.756C3.258 14.666 3.204 14.612 3.114 14.576L2.97 14.558C2.844 14.558 2.79 14.576 2.61 14.684C2.556 14.576 2.484 14.45 2.43 14.342C1.962 13.442 1.476 12.092 1.26 11.498C1.152 11.192 1.044 10.562 0.918 9.608C1.062 9.698 1.17 9.734 1.224 9.734C1.296 9.734 1.386 9.608 1.458 9.356C1.494 9.41 1.566 9.428 1.656 9.428C1.71 9.428 1.782 9.41 1.818 9.356L2.106 8.924L2.43 9.032H2.448C2.484 9.032 2.538 8.978 2.628 8.924C2.718 8.87 2.79 8.834 2.844 8.834L2.898 8.852C3.186 8.996 3.384 9.248 3.474 9.644C3.69 10.562 3.888 11.012 4.122 11.012C4.32 11.012 4.59 10.778 4.878 10.328C5.166 9.878 5.454 9.266 5.778 8.528C5.796 8.672 5.814 8.744 5.85 8.744C5.958 8.744 6.228 8.114 6.894 7.052C7.884 5.45 10.332 2.372 10.962 1.94C11.43 1.616 11.79 1.31 12.042 1.04C12.006 1.22 11.97 1.346 11.97 1.4C11.97 1.454 12.006 1.472 12.042 1.472L12.546 1.22V1.292C12.546 1.382 12.564 1.436 12.618 1.436C12.69 1.436 12.978 1.148 13.014 1.04L12.978 1.292L13.59 0.932L13.446 1.256C13.626 1.13 13.77 1.058 13.86 1.058C13.95 1.058 14.004 1.202 14.004 1.292C14.004 1.436 13.878 1.634 13.68 1.886C13.464 2.174 12.924 2.732 11.304 4.586C10.602 5.378 7.488 9.608 6.894 10.616L5.778 12.506C5.292 13.316 4.986 13.838 4.824 14.036C4.662 14.234 4.464 14.432 4.23 14.612L4.068 14.522L3.924 14.612L3.762 14.792Z' fill='black'/>
            </svg>
          </div>
          <span class='circle-text'>Email address</span>
      </div>
      <div class='line-container'>
          <div class='line'></div>
      </div>
          <div class='circle-container'>
          <div id='completed-step-circle'>
              <svg id='completed-step-svg' xmlns='http://www.w3.org/2000/svg' width='100%' height='100%' viewBox='0 0 16 16'>
              <path d='M3.762 14.792C3.762 14.63 3.744 14.558 3.672 14.558L3.258 14.756C3.258 14.666 3.204 14.612 3.114 14.576L2.97 14.558C2.844 14.558 2.79 14.576 2.61 14.684C2.556 14.576 2.484 14.45 2.43 14.342C1.962 13.442 1.476 12.092 1.26 11.498C1.152 11.192 1.044 10.562 0.918 9.608C1.062 9.698 1.17 9.734 1.224 9.734C1.296 9.734 1.386 9.608 1.458 9.356C1.494 9.41 1.566 9.428 1.656 9.428C1.71 9.428 1.782 9.41 1.818 9.356L2.106 8.924L2.43 9.032H2.448C2.484 9.032 2.538 8.978 2.628 8.924C2.718 8.87 2.79 8.834 2.844 8.834L2.898 8.852C3.186 8.996 3.384 9.248 3.474 9.644C3.69 10.562 3.888 11.012 4.122 11.012C4.32 11.012 4.59 10.778 4.878 10.328C5.166 9.878 5.454 9.266 5.778 8.528C5.796 8.672 5.814 8.744 5.85 8.744C5.958 8.744 6.228 8.114 6.894 7.052C7.884 5.45 10.332 2.372 10.962 1.94C11.43 1.616 11.79 1.31 12.042 1.04C12.006 1.22 11.97 1.346 11.97 1.4C11.97 1.454 12.006 1.472 12.042 1.472L12.546 1.22V1.292C12.546 1.382 12.564 1.436 12.618 1.436C12.69 1.436 12.978 1.148 13.014 1.04L12.978 1.292L13.59 0.932L13.446 1.256C13.626 1.13 13.77 1.058 13.86 1.058C13.95 1.058 14.004 1.202 14.004 1.292C14.004 1.436 13.878 1.634 13.68 1.886C13.464 2.174 12.924 2.732 11.304 4.586C10.602 5.378 7.488 9.608 6.894 10.616L5.778 12.506C5.292 13.316 4.986 13.838 4.824 14.036C4.662 14.234 4.464 14.432 4.23 14.612L4.068 14.522L3.924 14.612L3.762 14.792Z' fill='black'/>
            </svg>
          </div>
          <span class='circle-text'>Password</span>
      </div>
      <div class='line-container'>
          <div class='line'></div>
      </div>
      <div class='button-span-container'></div>
          <svg id='register-step4-svg' width='14' height='25' viewBox='0 0 14 25' fill='none'>
              <path d='M2 2.80176L12 12.7862' stroke='black' stroke-width='4' stroke-linecap='round' />
              <path d='M12 12.7861L2 22.7705' stroke='black' stroke-width='4' stroke-linecap='round' />
          </svg>
      <div class='line-container'>
          <div class='line'></div>
      </div>
      <div class='bonus-container'>
          <div class='bonus-circle'></div>
          <div class='bonus-text'>
              <span class='text-claim'>Claim</span>
              <span class='text-bonus'>BONUS</span>
          </div>
      </div>
    </div>`;
    const confirmDetailsButton = confirmDetailsContainer.querySelector('button');
    confirmDetailsButton.id = 'register-large-button';
    const confirmDetailsTextContainer = confirmDetailsButton.querySelectorAll('span')[1];
    confirmDetailsTextContainer.textContent = 'Confirm your details';

    const confirmDetailsButtonDiv = document.querySelector('.button-span-container');
    confirmDetailsButtonDiv.appendChild(confirmDetailsButton, confirmDetailsButtonDiv.firstChild);

    const svg = document.getElementById('register-step4-svg');
    confirmDetailsButton.appendChild(svg);
  }
}

function step5SetUp() {
  if (currentStep === 5) {
    const shButton = document.querySelector('sh-button');
    const button = shButton.querySelector('button');

    button.removeEventListener('click', fixingCalendar);
    button.addEventListener('click', fixingCalendar);
    const existingSvg = button.querySelector('svg');


    if (!existingSvg) {
      const matIcon = button.querySelector('mat-icon');
      if (matIcon) {
        const svg = createCalendarIcon();
        button.replaceChild(svg, matIcon);
      }
    }

    const xpathBirthdate = '/html/body/os-root/div/div/mat-drawer-container/mat-drawer-content/div/div/div/os-footer/div/os-content-page/div/div/div[6]/div/div/div/div[1]/div/div/os-form/div[1]/os-registration/div/div[6]/sh-dynamic-form-step/form/div[1]/div[3]/mat-form-field/div[1]/div/div[1]/div[2]/label/mat-label';
    const getXpathBirthdate = document.evaluate(xpathBirthdate, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
    const birthdateLabel = getXpathBirthdate.singleNodeValue;
    if (birthdateLabel) {
      birthdateLabel.innerText = 'Birthdate';
      birthdateLabel.style.transform = 'translate(15px, -15px)';
    }
  }
}

function step6SetUp() {
  if (currentStep === 6) {
    const phoneInput = document.getElementById('phone-number');
    phoneInput.value = '';
  }
}

function step7SetUp() {
  if (currentStep === 7) {
    const backButton = document.getElementById('backButton');
    backButton.classList.remove('d-flex');
    backButton.setAttribute('width', '0');
    const registrationCompleteText = document.createElement('p');
    registrationCompleteText.innerText = 'Registration Complete';
    registrationCompleteText.id = 'registration-complete';
    const containerHeader = document.getElementById('container-header');

    const firstDepositText = document.createElement('p');
    firstDepositText.innerHTML = 'Make your first deposit to unlock <br> your exclusive bonus and start <br> playing now!';
    firstDepositText.id = 'first-deposit-text';

    const depositClaimText = document.createElement('p');
    depositClaimText.innerHTML = 'Deposit & <br> Claim Bonus';
    depositClaimText.id = 'claim-deposit-text';

    const svgStep7 = createSvgStep7();
    svgStep7.style.width = '100%';

    containerHeader.appendChild(svgStep7);
    containerHeader.appendChild(registrationCompleteText);
    containerHeader.appendChild(firstDepositText);
    containerHeader.appendChild(depositClaimText);

    const setLoginsButton = document.querySelectorAll('button')[3];
    if (setLoginsButton) {
      setLoginsButton.id = 'register-large-button';
      setLoginsButton.innerText = '';
      setLoginsButton.style.width = '280px';
      setLoginsButton.style.alignSelf = 'center';
      setLoginsButton.classList.add('d-flex');
      setLoginsButton.style.transform = 'translateY(-40px)';

      const claimText = document.createElement('span');
      claimText.textContent = 'Claim';
      claimText.style.color = '#152711';
      claimText.style.fontFamily = 'DM Sans';
      claimText.style.fontSize = '24px';
      claimText.style.fontWeight = '500';
      claimText.style.lineHeight = '16px';
      claimText.style.marginRight = '5px';

      const bonusText = document.createElement('span');
      bonusText.textContent = 'BONUS';
      bonusText.style.color = '#152711';
      bonusText.style.fontFamily = 'Orbitron';
      bonusText.style.fontSize = '30px';
      bonusText.style.fontWeight = '800';
      bonusText.style.lineHeight = '16px';

      setLoginsButton.appendChild(claimText);
      setLoginsButton.appendChild(bonusText);
    }
    setLoginsButton.addEventListener('click', () => {
      setTimeout(() => {
        window.location.reload();
      }, 1200);
    })
  }
}

function createSvgStep7() {

  let svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
  svg.setAttribute('width', '101');
  svg.setAttribute('height', '101');
  svg.setAttribute('viewBox', '0 0 101 101');
  svg.setAttribute('fill', 'none');
  svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');

  let path1 = document.createElementNS('http://www.w3.org/2000/svg', 'path');
  path1.setAttribute('d', 'M48.3182 71.348C48.3182 70.52 47.6472 69.848 46.8182 69.848H12.9052C13.6862 55.059 25.9612 43.269 40.9362 43.269C46.3462 43.269 51.5982 44.811 56.1212 47.73C56.8172 48.178 57.7452 47.979 58.1952 47.282C58.6442 46.586 58.4432 45.657 57.7482 45.208C52.7372 41.977 46.9242 40.269 40.9362 40.269C23.8042 40.269 9.86523 54.211 9.86523 71.348C9.86523 72.176 10.5362 72.848 11.3652 72.848H46.8182C47.6462 72.848 48.3182 72.176 48.3182 71.348Z');
  path1.setAttribute('fill', '#51FF00');

  let path2 = document.createElementNS('http://www.w3.org/2000/svg', 'path');
  path2.setAttribute('d', 'M40.4161 37.488C50.3281 37.488 58.3921 29.423 58.3921 19.509C58.3921 9.60297 50.3281 1.54297 40.4161 1.54297C30.5111 1.54297 22.4531 9.60297 22.4531 19.509C22.4531 29.422 30.5111 37.488 40.4161 37.488ZM40.4161 4.54297C48.6731 4.54297 55.3921 11.257 55.3921 19.509C55.3921 27.768 48.6741 34.488 40.4161 34.488C32.1661 34.488 25.4531 27.768 25.4531 19.509C25.4531 11.257 32.1661 4.54297 40.4161 4.54297Z');
  path2.setAttribute('fill', '#51FF00');

  let path3 = document.createElementNS('http://www.w3.org/2000/svg', 'path');
  path3.setAttribute('d', 'M89.8725 88.987L79.4785 73.871C81.4615 71.262 82.5605 68.109 82.5825 64.776C82.6435 56.352 75.8405 49.447 67.4155 49.383C59.0225 49.343 52.0855 56.137 52.0235 64.561C52.0005 67.978 53.1205 71.132 55.0055 73.693L44.3855 88.662C44.0285 89.167 44.0165 89.839 44.3565 90.355C44.6965 90.871 45.3165 91.126 45.9225 90.997L54.3245 89.201L55.8005 97.094C55.9175 97.719 56.4145 98.202 57.0425 98.301C57.1205 98.313 57.1985 98.319 57.2745 98.319C57.8195 98.319 58.3295 98.022 58.5935 97.532L67.1835 81.638L75.5475 97.652C75.8085 98.152 76.3235 98.458 76.8755 98.458C76.9455 98.458 77.0165 98.453 77.0875 98.443C77.7165 98.353 78.2215 97.878 78.3475 97.255L79.9375 89.387L88.2995 91.3C88.8995 91.437 89.5285 91.193 89.8755 90.681C90.2245 90.167 90.2225 89.495 89.8725 88.987ZM67.3135 52.383C67.3395 52.383 67.3675 52.383 67.3935 52.383C74.1645 52.434 79.6315 57.985 79.5815 64.755V64.756C79.5605 68.032 78.2615 71.105 75.9235 73.407C73.6085 75.687 70.5525 76.94 67.3085 76.939C67.2785 76.939 67.2465 76.939 67.2155 76.939C60.4475 76.893 54.9785 71.349 55.0235 64.581C55.0725 57.838 60.5795 52.383 67.3135 52.383ZM57.9715 92.376L56.9925 87.136C56.9185 86.739 56.6855 86.387 56.3495 86.163C56.0115 85.937 55.5975 85.858 55.2035 85.944L49.0605 87.257L57.0665 75.973C59.1925 77.899 61.8575 79.23 64.8125 79.717L57.9715 92.376ZM79.1085 86.117C78.7115 86.026 78.2995 86.1 77.9605 86.318C77.6205 86.538 77.3845 86.885 77.3035 87.282L76.2475 92.508L69.5855 79.754C72.4775 79.323 75.1655 78.077 77.3855 76.121L85.2205 87.516L79.1085 86.117Z');
  path3.setAttribute('fill', '#51FF00');

  svg.appendChild(path1);
  svg.appendChild(path2);
  svg.appendChild(path3);

  return svg;
}

function fixingCalendar() {
  const matCalendar = document.querySelector('mat-calendar');
  const matCalendarHeader = matCalendar.querySelector('mat-calendar-header');
  const innerMatCalendarHeader = matCalendarHeader.querySelector('.mat-calendar-header');
  const matCalendarControls = innerMatCalendarHeader.querySelector('.mat-calendar-controls');

  const calendarYearButton = matCalendarControls.querySelectorAll('button')[0];
  const calendarBackButton = matCalendarControls.querySelectorAll('button')[1];
  const calendarFowardButton = matCalendarControls.querySelectorAll('button')[2];

  calendarFowardButton.style.scale = '0.7';
  calendarBackButton.style.scale = '0.7';

  matCalendarControls.insertBefore(calendarBackButton, calendarYearButton);
}

function createCalendarIcon() {
  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
  svg.setAttribute('width', '24');
  svg.setAttribute('height', '25');
  svg.setAttribute('viewBox', '0 0 24 25');
  svg.setAttribute('fill', 'none');
  svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');

  const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
  rect.setAttribute('x', '3');
  rect.setAttribute('y', '6.21997');
  rect.setAttribute('width', '18');
  rect.setAttribute('height', '15');
  rect.setAttribute('rx', '2');
  rect.setAttribute('stroke', '#F3F6F3');
  svg.appendChild(rect);

  const path1 = document.createElementNS('http://www.w3.org/2000/svg', 'path');
  path1.setAttribute('d', 'M4 11.22H20');
  path1.setAttribute('stroke', '#F3F6F3');
  path1.setAttribute('stroke-linecap', 'round');
  svg.appendChild(path1);

  const path2 = document.createElementNS('http://www.w3.org/2000/svg', 'path');
  path2.setAttribute('d', 'M9 16.22H15');
  path2.setAttribute('stroke', '#F3F6F3');
  path2.setAttribute('stroke-linecap', 'round');
  svg.appendChild(path2);

  const path3 = document.createElementNS('http://www.w3.org/2000/svg', 'path');
  path3.setAttribute('d', 'M8 3.21997L8 7.21997');
  path3.setAttribute('stroke', '#F3F6F3');
  path3.setAttribute('stroke-linecap', 'round');
  svg.appendChild(path3);

  const path4 = document.createElementNS('http://www.w3.org/2000/svg', 'path');
  path4.setAttribute('d', 'M16 3.21997L16 7.21997');
  path4.setAttribute('stroke', '#F3F6F3');
  path4.setAttribute('stroke-linecap', 'round');
  svg.appendChild(path4);

  return svg;
}

function openTermsAndConditions() {
  window.open('https://instacasino.com/en/core/terms-and-conditions', '_blank');
}


function start() {
  const storage = JSON.parse(localStorage.getItem('018da2e6-edc0-7d15-bd95-029cf7403f3c'));

  const isLogged = !!storage?.state?.auth?.userName;

  if (isLogged) {
    return;
  }

  setTimeout(actionOsForm, 1000);
  setTimeout(performActions, 800);
  setTimeout(addListenerButton, 800);
  setTimeout(step3SetUp, 800);
  setTimeout(step4SetUp, 800);
  setTimeout(step5SetUp, 800);
  setTimeout(step6SetUp, 800);
  setTimeout(step7SetUp, 800);
}

start();